<?xml version="1.0" encoding="utf-8" ?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mm="random.components.*" xmlns:mx="library://ns.adobe.com/flex/mx" applicationComplete="initApp()">
    <fx:Script><![CDATA[
        import flash.display.DisplayObject;

        import mx.collections.ArrayList;

        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import random.events.CustomEventHandler;

        import random.events.CustomMouseDownEvent;
        import random.events.CustomMouseMoveEvent;
        import random.events.CustomMouseUpEvent;

        import random.events.DemoDataUrlChangeEvent;
        import random.events.GenerateStartEvent;
        import random.utils.Constants;
        import random.utils.GeneratorUtil;
        import random.utils.vo.Building;

        import random.valueObject.BuildingVo;

        import spark.events.IndexChangeEvent;

        // 鼠标是否离开SWF
        private var isMouseInSWF:Boolean = true;
        // 鼠标是否按下
        private var isMouseDown:Boolean = false;
        [Bindable]
        private var jsonPath:String;
        [Bindable]
        private var buidingData:BuildingVo;
        //
        private var customEventHandler:CustomEventHandler = new CustomEventHandler();

        private function initApp():void {
            if (jsonPath) {
                dataService.send();
            }
//            stage.addEventListener(MouseEvent.MOUSE_OUT, stage_mouseOutHandler);
            buildingGroup.addEventListener(Constants.CUSTOM_MOUSE_DOWM_EVENT_TYPE, buildingGroup_customMouseDownEventTypeHandler);
            buildingGroup.addEventListener(Constants.CUSTOM_MOUSE_MOVE_EVENT_TYPE, buildingGroup_customMouseMoveEventTypeHandler);
            buildingGroup.addEventListener(Constants.CUSTOM_MOUSE_UP_EVENT_TYPE, buildingGroup_customMouseUpEventTypeHandler);
        }

        private function onLoaderComplete(e:ResultEvent):void {
            var jsonData:Object = JSON.parse(e.result.toString());
//            Alert.show(JSON.stringify(imgCache));
            buidingData = new BuildingVo(jsonData, imgCache);
        }

        private function onLoaderFault(e:FaultEvent):void {
            Alert.show(JSON.stringify(e.fault.rootCause), "Info")
        }

        private function loadDataConponents1_demoDataChangeHandler(event:DemoDataUrlChangeEvent):void {
            jsonPath = Constants.SERVER_URL + "resources/" + event.dataName + ".json?r=" + Math.random();
            dataService.send();
        }

        private function generatorComponent1_generateStartEventHandler(event:GenerateStartEvent):void {
            var building:Building = GeneratorUtil.generateBuilding(event);
            Alert.show(JSON.stringify(building));
        }

        /**
         *  鼠标按下开始记录选中房间
         * @param event
         */
        private function buildingGroup_customMouseDownEventTypeHandler(event:CustomMouseDownEvent):void {
            this.isMouseDown = true;
            this.customEventHandler.clean();
            this.customEventHandler.append(event);
        }

        /**
         *  鼠标移动的处理
         * @param event
         */
        private function buildingGroup_customMouseMoveEventTypeHandler(event:CustomMouseMoveEvent):void {
            if(this.isMouseDown){
                this.customEventHandler.removeBebind(event);
            }
        }

        /**
         *  鼠标释放的处理
         * @param event
         */
        private function buildingGroup_customMouseUpEventTypeHandler(event:CustomMouseUpEvent):void {
            this.isMouseDown = false;
            this.customEventHandler.removeBebind(event);
        }

        /**
         *  鼠标离开 SWF
         * @param event
         */
        private function stage_mouseOutHandler(event:MouseEvent):void {
            this.isMouseInSWF = false;
            Alert.show("out swf");
        }
        ]]></fx:Script>

    <fx:Declarations>
        <s:HTTPService id="dataService" url="{jsonPath}" showBusyCursor="true" method="GET" result="onLoaderComplete(event)" fault="onLoaderFault(event)"/>
        <!--<s:ArrayList id="roomList" source="{buidingData.rooms.toArray()}"/>-->
        <s:ContentCache id="imgCache" enableQueueing="true" maxActiveRequests="1" maxCacheEntries="10"/>
    </fx:Declarations>
    <s:Scroller width="100%" height="100%">
        <s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" paddingBottom="3" paddingLeft="3" paddingRight="3">
            <s:Panel title="Building Info" width="15%" top="3">
                <mx:Accordion width="100%" height="100%">
                    <s:NavigatorContent label="Generate">
                        <mm:GeneratorComponent width="100%" height="100%" padding="5" generateStartEvent="generatorComponent1_generateStartEventHandler(event)"/>
                    </s:NavigatorContent>
                    <s:NavigatorContent label="Load Data From Services">
                        <mm:LoadDataConponents width="100%" height="100%"  padding="5" buidingData="{buidingData}"
                                               demoDataChange="loadDataConponents1_demoDataChangeHandler(event)"/>
                    </s:NavigatorContent>
                </mx:Accordion>
            </s:Panel>
            <s:Panel id="buildingPanel" minHeight="600" minWidth="955" height="{(buidingData.bFloorsNum + buidingData.uFloorsNum) * Constants.UNIT_LENGTH + 100}"
                     width="85%" title="Building Id: {buidingData.id} -- Name: {buidingData.name}">
                <s:Scroller left="10" top="10" right="10" bottom="10">
                    <!--<s:DataGroup dataProvider="{buidingData.rooms}" id="buildingGroup" itemRenderer="random.renderers.RoomItemRender" width="100%" height="100%"/>-->
                    <s:DataGroup dataProvider="{buidingData.rooms}" id="buildingGroup" itemRenderer="random.renderers.CustomRoom" width="100%" height="100%"/>
                </s:Scroller>
            </s:Panel>
        </s:HGroup>
    </s:Scroller>
</s:Application>
